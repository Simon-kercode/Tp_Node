services:
  db:
    image: mysql:8 # image officielle MySQL version 8
    restart: always # Redémarre si crash
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # password super-utilisateur
      MYSQL_DATABASE: ${MYSQL_DATABASE}           # Base de données à créer au démarrage
      MYSQL_USER: ${MYSQL_USER}                   # Utilisateur MySQL standard à créer
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}           # password utilisateur standard
    volumes:
      - ./backend/data/tp_node.sql:/docker-entrypoint-initdb.d/tp_node.sql # initialise la BDD avec le script SQL
    ports:
      - "3307:3306" # redirige le port 3306 du conteneur sur le port 3307 de la machine
  backend:
    build: ./backend # Construit l'image à partir du Dockerfile dans ./backend
    restart: always
    ports:
      - "${BACKEND_PORT}:3000" # Mappe le port 3000 du conteneur sur la variable BACKEND_PORT de la machine
    environment:
      # Variables d'environnement pour le backend
      DB_HOST: ${DB_HOST}         
      DB_USER: ${DB_USER}         
      DB_PASSWORD: ${DB_PASSWORD} 
      DB_NAME: ${DB_NAME}         
      PORT: ${BACKEND_PORT}               
      JWT_SECRET: ${JWT_SECRET}   # Secret pour les tokens JWT
    depends_on:
      - db # lance le backend seulement après la base de données

    working_dir: /app
    command: node index.js

  frontend:
    build: ./frontend # Construit l'image à partir du Dockerfile dans ./frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:80" # Mappe le port 80 du conteneur sur la variable FRONTEND_PORT de la machine
    depends_on:
      - backend # Lance le frontend seulement après le backend
    volumes:
      - ./frontend:/app # Monte le dossier frontend local dans /app du conteneur

volumes:
  db_data: # Déclaration d'un volume nommé